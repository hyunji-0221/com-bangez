server:
  port: 8000
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
spring:
  config:
    import: "optional:configserver:http://localhost:8888"
  application:
    name: api
  profiles:
    active: gateway
  main:
    allow-bean-definition-overriding: true
    web-application-type: reactive
  cloud:
    gateway:
      # default-filters:
      #   - name: GlobalFilter
      #     args:
      #       baseMessage: Spring Cloud Gateway Global Filter
      #       preLogger: true
      #       postLogger: true
      routes:
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/users/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/users/(?<segment>.*), /$\{segment}

        - id: tx-service
          uri: lb://TX-SERVICE
          predicates:
            - Path=/tx/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/tx/(?<segment>.*), /$\{segment}

        - id: land-service
          uri: lb://LAND-SERVICE
          predicates:
            - Path=/land/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/land/(?<segment>.*), /$\{segment}

        - id: analysis-service
          uri: lb://ANALYSIS-SERVICE
          predicates:
            - Path=/analysis/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/analysis/(?<segment>.*), /$\{segment}

        - id: chat-service
          uri: lb://CHAT-SERVICE
          predicates:
            - Path=/chat/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/chat/(?<segment>.*), /$\{segment}

jwt:
  secret: bitcampbitcampbitcampbitcampbitcamp

management:
  endpoints:
    web:
      exposure:
        # include: refresh, health, beans, httpexchanges, busrefresh, info, metrics, prometheus
        include: "*" # 테스트를 위해 actuator 전체 노출
  endpoint:
    info:
      enabled: true
    refresh:
      enabled: true
    health:
      enabled: true
    beans:
      enabled: true
    httpexchanges:
      enabled: true
  health:
    circuitbreakers:
      enabled: true # circuitbreakers 정보 노출
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 5
        registerHealthIndicator: true
        # slidingWindowType
        # 기본은 COUNT_BASED 이며 TIME_BASED로 사용할 수 있습니다.
        # slidingWindowSize
        # COUNT_BASED라면 array 크기이며 TIME_BASED라면 초 입니다.
        # failureRateThreshold: 50
        # 실패율 임계값을 설정합니다.
        # 해당 %가 넘거나 같아지면 circuitBreaker의 상태가 Open으로 변경되며
        # 실제 코드를 호출하지 않고 fallback 또는 fail 처리 됩니다.
        # permittedNumberOfCallsInHalfOpenState
        # circuit이 HALF_OPEN 상태일 때 허용되는 call 수